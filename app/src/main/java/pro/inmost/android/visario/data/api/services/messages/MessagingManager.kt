package pro.inmost.android.visario.data.api.services.messages

import kotlinx.coroutines.Dispatchers.IO
import kotlinx.coroutines.withContext
import okhttp3.MediaType.Companion.toMediaTypeOrNull
import okhttp3.MultipartBody
import okhttp3.RequestBody.Companion.asRequestBody
import pro.inmost.android.visario.data.api.dto.requests.messages.AttachmentData
import pro.inmost.android.visario.data.api.dto.requests.messages.EditMessageRequest
import pro.inmost.android.visario.data.api.dto.requests.messages.SendMessageRequest
import pro.inmost.android.visario.data.entities.message.MessageData
import pro.inmost.android.visario.data.utils.extensions.toJson
import pro.inmost.android.visario.utils.extensions.toRequestBody
import pro.inmost.android.visario.utils.logError
import java.io.File


/**
 * Messaging manager
 *
 * @property service - messaging service generated by retrofit
 */
class MessagingManager(
    private val service: MessagingService
) {
    /**
     * Get all messages from channel
     *
     * @param channelArn
     * @return list of messages
     */
    suspend fun getMessages(channelArn: String) = withContext(IO) {
        kotlin.runCatching {
            service.getMessages(channelArn).getResult()
        }.getOrElse {
            logError(it.message ?: "")
            Result.failure(it)
        }
    }

    /**
     * Send message to channel
     *
     * @param data
     */
    suspend fun sendMessage(data: MessageData, attachment: File? = null) = withContext(IO) {
        kotlin.runCatching {
            val request = SendMessageRequest(
                channelArn = data.channelArn,
                content = data.content ?: "",
                metadata = AttachmentData(data.awsId)
            )
            if (attachment != null){
                val filePart = MultipartBody.Part.createFormData(
                    "file",
                    attachment.name,
                    attachment.asRequestBody("multipart/form-data".toMediaTypeOrNull())
                )

                val messageBody = request.toJson().toRequestBody()

                service.sendMessageWithAttachment(filePart, messageBody).getResult()
            } else {
                service.sendMessage(request).getResult()
            }
        }.getOrElse {
            logError(it.message ?: "")
            Result.failure(it)
        }
    }

    /**
     * Edit channel message
     *
     * @param request
     */
    suspend fun editMessage(request: EditMessageRequest) = withContext(IO) {
        kotlin.runCatching {
            service.editMessage(request).getResult()
        }.getOrElse {
            logError(it.message ?: "")
            Result.failure(it)
        }
    }

    /**
     * Delete message from channel
     *
     * @param messageId
     * @return
     */
    suspend fun deleteMessage(messageId: String): Result<Unit>  = withContext(IO) {
        kotlin.runCatching {
            service.deleteMessage(messageId).getResult()
        }.getOrElse {
            logError(it.message ?: "")
            Result.failure(it)
        }
    }
}