package pro.inmost.android.visario.data.api.services.meetings

import kotlinx.coroutines.Dispatchers.IO
import kotlinx.coroutines.withContext
import pro.inmost.android.visario.data.api.dto.requests.meeting.CreateAttendeeRequest
import pro.inmost.android.visario.data.api.dto.requests.meeting.DeleteAttendeeRequest
import pro.inmost.android.visario.data.api.dto.requests.meeting.GetAttendeeInfoRequest
import pro.inmost.android.visario.data.api.dto.responses.meeting.AttendeeInfoResponse
import pro.inmost.android.visario.data.api.dto.responses.meeting.GetMeetingResponse
import pro.inmost.android.visario.data.api.services.Endpoints
import pro.inmost.android.visario.data.entities.meeting.AttendeeData
import pro.inmost.android.visario.data.utils.logError
import pro.inmost.android.visario.data.utils.logInfo
import pro.inmost.android.visario.ui.utils.log

/**
 * Meeting manager
 *
 * @property service - meeting service generated by retrofit
 */
class MeetingManager(private val service: MeetingService) {

    /**
     * Create new meeting and attendee with current user
     *
     * @return meeting and attendee data with web-socket links
     */
    suspend fun createMeeting(): Result<GetMeetingResponse> = withContext(IO) {
        kotlin.runCatching {
            val meetingResponse = service.createMeeting()
            log(meetingResponse.toString())
            Result.success(meetingResponse)
        }.getOrElse {
            logError("createMeeting error: ${it.message}")
            Result.failure(it)
        }
    }

    /**
     * Create new attendee for ready meeting
     *
     * @param meetingId
     * @param userId
     * @return attendee data
     */
    suspend fun createAttendee(meetingId: String, userId: Long): Result<AttendeeData> =
        withContext(IO) {
            kotlin.runCatching {
                val request = CreateAttendeeRequest(meetingId, userId)
                val response = service.createAttendee(request)
                logInfo("Create attendee response: $response")
                Result.success(response)
            }.getOrElse {
                logError("Create attendee error: ${it.message}")
                Result.failure(it)
            }
        }

    /**
     * Delete attendee from meeting
     *
     * @param meetingId
     * @param userId of user who wants or needs to leave the meeting
     */
    suspend fun deleteAttendee(meetingId: String, userId: Long): Result<Unit> = withContext(IO) {
        kotlin.runCatching {
            val request = DeleteAttendeeRequest(meetingId, userId.toString())
            val response = service.deleteAttendee(request)
            logInfo("Delete attendee response: $response")
            Result.success(Unit)
        }.getOrElse {
            logError("Delete attendee error: ${it.message}")
            Result.failure(it)
        }
    }

    /**
     * Get meeting invitation link for sending to other user
     *
     * @param meetingId
     * @return string with actual link
     */
    fun getMeetingInvitationLink(meetingId: String) =
        "${Endpoints.SERVER_BASE_URL}${Endpoints.MEETING_GET}?meetingId=$meetingId"

    /**
     * Join the existing meeting
     *
     * @param meetingId
     * @return meeting and attendee data with web-socket links
     */
    suspend fun joinMeeting(meetingId: String): Result<GetMeetingResponse> = withContext(IO) {
        kotlin.runCatching {
            val meetingResponse = service.getMeeting(meetingId)
            log(meetingResponse.toString())
            Result.success(meetingResponse)
        }.getOrElse {
            logError("Get meeting error: ${it.message}")
            Result.failure(it)
        }
    }

    /**
     * Get meeting attendee's basic info
     *
     * @param userId id of user from the meeting
     * @param meetingId id of existing meeting
     * @return attendee basic data
     */
    suspend fun getAttendeeInfo(userId: String, meetingId: String): Result<AttendeeInfoResponse> = withContext(IO){
        kotlin.runCatching {
            val request = GetAttendeeInfoRequest(userId, meetingId)
            log("getAttendeeInfo request: $request")
            val response = service.getAttendeeInfo(request)
            log("getAttendeeInfo response: $response")
            Result.success(response)
        }.getOrElse {
            logError("Get attendee info error: ${it.message}")
            Result.failure(it)
        }
    }
}