package pro.inmost.android.visario.data.api.services.contacts

import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import pro.inmost.android.visario.data.api.dto.requests.contacts.AddContactRequest
import pro.inmost.android.visario.data.api.dto.requests.contacts.DeleteContactRequest
import pro.inmost.android.visario.data.api.dto.requests.contacts.EditContactRequest
import pro.inmost.android.visario.utils.logError

/**
 * Contacts manager for interaction with the user's contacts
 *
 * @property service - channels service generated by retrofit
 *
 */
class ContactsManager(private val service: ContactsService) {


    /**
     * Get contacts that the user has added to his list
     *
     * @return list of contacts
     */
    suspend fun getContacts() = withContext(Dispatchers.IO){
        kotlin.runCatching {
            service.getContacts().getResult()
        }.getOrElse {
            logError(it.message ?: "")
            Result.failure(it)
        }
    }

    /**
     * Add contact to the user's list
     *
     * @param username
     */
    suspend fun addContact(username: String) = withContext(Dispatchers.IO){
        kotlin.runCatching {
            service.addContact(AddContactRequest(username)).getResult()
        }.getOrElse  {
            logError("addContact error: " + it.message)
            Result.failure(it)
        }
    }

    /**
     * Edit contact's first and last name
     *
     * @param request - EdictContactRequest with id, firstName and lastName params
     * @return Successfully of failure Result
     */
    suspend fun editContact(request: EditContactRequest) = withContext(Dispatchers.IO){
        kotlin.runCatching {
            service.editContact(request).getResult()
        }.getOrElse  {
            logError("editContact error: " + it.message ?: "")
            Result.failure(it)
        }
    }

    /**
     * Delete contact from user's list
     *
     * @param id - user id
     */
    suspend fun deleteContact(id: Long) = withContext(Dispatchers.IO){
        kotlin.runCatching {
            service.deleteContact(DeleteContactRequest(id)).getResult()
        }.getOrElse  {
            logError("deleteContact error: " + it.message ?: "")
            Result.failure(it)
        }
    }

    /**
     * Search contacts by username
     *
     * @param username
     * @return list of contacts whose username contain the query string
     */
    suspend fun search(username: String) = withContext(Dispatchers.IO){
        kotlin.runCatching {
            service.search(username).getResult()
        }.getOrElse {
            logError("searchContacts error: " + it.message ?: "")
            Result.failure(it)
        }
    }
}